{
  "classes": {
    "iot.agile.Apps": {
      "description": "Apps API enable the management of AGILE apps and components\n",
      "group": "Apps",
      "methods": {
        "Start": {
          "args": {
            "app": {
              "description": "Application name to start",
              "type": "String"
            },
            "params": {
              "description": "Application parameters to pass",
              "example": "`[ --start, --verbose, --config, ~/myapp/config.json ]`",
              "type": "Array",
              "fields": "String"
            }
          },
          "return": {
            "description": "Return informations regarding the operation results.",
            "type": "Boolean"
          }
        },
        "Stop": {
          "args": {
            "app": {
              "description": "Application name to stop",
              "type": "String"
            }
          },
          "return": {
            "description": "Return the exit code, if available.",
            "type": "Number"
          }
        },
        "Restart": {
          "args": {
            "app": {
              "description": "Application name to restart",
              "type": "String"
            }
          },
          "return": {
            "type": "Boolean"
          }
        },
        "Install": {
          "args": {
            "app": {
              "description": "Application name to install",
              "type": "String"
            }
          },
          "return": {
            "type": "Boolean"
          }
        },
        "Uninstall": {
          "args": {
            "app": {
              "description": "Application name to uninstall",
              "type": "String"
            }
          },
          "return": {
            "type": "Boolean"
          }
        },
        "Status": {
          "args": {
            "app": {
              "description": "Application name to uninstall",
              "type": "String"
            }
          },
          "return": {
            "type": "Object",
            "fields": {
              "running": {
                "type": "Boolean"
              },
              "message": {
                "type": "String"
              },
              "pid": {
                "type": "Number"
              }
            }
          }
        }
      },
      "properties": {
        "Logs": {
          "description": "System path to Apps log file.\nContains per-app filterable output.\n",
          "type": "String"
        },
        "Settings": {
          "type": "Object*",
          "fields": {
            "Provider": {
              "description": "Define an installer provider",
              "example": "docker",
              "type": "String"
            },
            "ApiKey": {
              "description": "User apiKey if required",
              "type": "String"
            },
            "RepositoryUrl": {
              "description": "Repository / Marketplace API  url",
              "type": "String"
            }
          }
        }
      }
    },
    "iot.agile.Device": {
      "group": "Device",
      "methods": {
        "Execute": {
          "description": "Execute an operation on the device triggering the underline Protocol implementation",
          "args": {
            "op": {
              "description": "Operation name or code as string",
              "type": "String"
            },
            "payload": {
              "description": "Payload for the Protocol command",
              "type": "Object*"
            }
          },
          "return": {
            "type": "Object",
            "fields": {
              "result": {
                "type": "Boolean,"
              },
              "resultCode": {
                "type": "Number"
              },
              "response": {
                "type": "Object*"
              }
            }
          }
        },
        "Read": {
          "args": {
            "sensorName": {
              "type": "String"
            }
          },
          "return": {
            "type": "Object*"
          }
        },
        "Write": {
          "args": {
            "sensorName": {
              "type": "String"
            },
            "data": {
              "type": "Object*"
            }
          },
          "return": {
            "type": "Boolean"
          }
        },
        "Subscribe": {
          "description": "Enable subscription to a specific sensor or data stream, triggering\nthe underlying Protocol implementation if supported.\n",
          "args": {
            "sensorName": {
              "type": "String"
            }
          },
          "return": {
            "type": "Boolean"
          }
        }
      },
      "properties": {
        "Id": {
          "description": "The unique device id in the gateway",
          "type": "String"
        },
        "Name": {
          "description": "The device name",
          "type": "String"
        },
        "Status": {
          "description": "Indicate the current device status",
          "type": "StatusType"
        },
        "Configuration": {
          "description": "User configurations storage",
          "type": "KeyValue"
        },
        "Profile": {
          "description": "Contains protocol specific provided information on device in order to handle at Protocol level the specific implementation",
          "type": "Object*"
        },
        "LastUpdate": {
          "description": "A UNIX timestamp to indicate the last data update received by the Device",
          "type": "Number"
        },
        "Data": {
          "description": "Retain the most recent updates of a sensor or data stream, received asynchronously from Subscribe call",
          "type": "Object*"
        },
        "Protocol": {
          "description": "Device-specific communication Protocol instance. Available to access protocol specific methods and properties",
          "reference": "iot.agile.Protocol"
        }
      }
    },
    "iot.agile.DeviceManager": {
      "group": "Device",
      "methods": {
        "Find": {
          "description": "Search for devices by specific criteria",
          "args": {
            "description": {
              "type": "An query object to search for a device"
            },
            "type": {
              "type": "BaseQuery"
            }
          },
          "return": {
            "description": "A list with all matching registered devices results, eventually sorted and sliced",
            "type": "Array",
            "reference": "iot.agile.Device"
          }
        },
        "Create": {
          "description": "Create (register) a new device in the manager",
          "args": {
            "device": {
              "type": "DeviceDefinition"
            }
          },
          "return": {
            "description": "Return the AGILE Device ID, unique to identify the device in the gateway",
            "type": "String"
          }
        },
        "Read": {
          "description": "Load a device definition by its ID",
          "args": {
            "Id": {
              "type": "String"
            }
          },
          "return": {
            "description": "Return the AGILE Device UUID, unique to identify the device in the gateway",
            "type": "DeviceDefinition"
          }
        },
        "Update": {
          "description": "Updates a device definition by its ID",
          "args": {
            "Id": {
              "type": "String"
            },
            "Definition": {
              "type": "DeviceDefinition"
            }
          },
          "return": {
            "type": "Boolean"
          }
        },
        "Delete": {
          "description": "Delete a device definition by its ID. This will deactivate the Device DBus object",
          "args": {
            "Id": {
              "type": "String"
            },
            "Definition": {
              "type": "DeviceDefinition"
            }
          },
          "return": {
            "type": "Boolean"
          }
        },
        "Batch": {
          "description": "Performa a batch operation over a set of devices.",
          "args": {
            "Op": {
              "type": "Enum",
              "fields": {
                "0": {
                  "type": "Create"
                },
                "1": {
                  "type": "Update"
                },
                "2": {
                  "type": "Delete"
                },
                "3": {
                  "type": "Read"
                }
              }
            },
            "Arguments": {
              "description": "An object to be passed to the underlying function call (Create, Update, Delete, Read)",
              "type": "Object*"
            }
          },
          "return": {
            "type": "Boolean"
          }
        }
      },
      "properties": {
        "Devices": {
          "description": "Return all registered devices",
          "type": "Array",
          "reference": "iot.agile.Device"
        }
      }
    },
    "iot.agile.Protocol": {
      "description": "A Protocol object abstract operations over a specific protocol implementation.\nEvery Device has one Protocol used to establish and use a communication exchange.\n",
      "group": "Device",
      "methods": {
        "Initialize": {
          "description": "Abstract a setup or initialization phase for a Protocol\n",
          "args": {
            "profile": {
              "type": "ProtocolProfile"
            }
          },
          "return": {
            "type": "void"
          }
        },
        "Destroy": {
          "description": "Abstract tear down for a Protocol, may be disconnection or deinitialization\n",
          "return": {
            "type": "void"
          }
        },
        "Discover": {
          "description": "Initiate a discovery operation\n",
          "return": {
            "type": "void",
            "reference": "Devices"
          }
        },
        "Write": {
          "description": "Send data over the protocol\n",
          "args": {
            "destination": {
              "type": "String"
            },
            "arguments": {
              "type": "Object*"
            }
          },
          "return": {
            "type": "Object*"
          }
        },
        "Read": {
          "description": "Read data over the Protocol, may be cached in the Data property\ndepending on implementation to save resources\n",
          "args": {
            "name": {
              "description": "Human readable data source name as defined in the ProtocolProfile object",
              "type": "String"
            },
            "arguments": {
              "type": "Object*"
            }
          },
          "return": {
            "type": "RecordObject"
          }
        },
        "Subscribe": {
          "description": "Subscribe to data updates over the Protocol\n",
          "args": {
            "name": {
              "description": "Human readable data source name as defined in the ProtocolProfile object",
              "type": "String"
            },
            "arguments": {
              "type": "Object*"
            }
          },
          "return": {
            "type": "RecordObject",
            "reference": "Data"
          }
        }
      },
      "properties": {
        "Status": {
          "access": {
            "0": "r",
            "1": "s"
          },
          "type": "ProtocolStatus"
        },
        "Driver": {
          "description": "Driver unique code name",
          "access": {
            "0": "r"
          },
          "example": "ble",
          "type": "String"
        },
        "Name": {
          "description": "Driver name",
          "access": {
            "0": "r"
          },
          "type": "String"
        },
        "DataStore": {
          "description": "Store the last record(s) received by a Read or Subscribe operation.\nIs up to the Protocol implementation decide how\n",
          "type": "RecordObject"
        },
        "Devices": {
          "type": "ProtocolDevice"
        }
      }
    },
    "iot.agile.ProtocolManager": {
      "methods": {
        "Discover": {
          "description": "Start discovery on all the managed Protocols",
          "return": {
            "type": "void"
          }
        },
        "Add": {
          "description": "Add a new Protocol",
          "args": {
            "protocol": {
              "type": "String",
              "reference": "iot.agile.Protocol"
            }
          },
          "return": {
            "type": "void"
          }
        },
        "Remove": {
          "description": "Remove a managed Protocol",
          "args": {
            "protocol": {
              "type": "String",
              "reference": "iot.agile.Protocol"
            }
          },
          "return": {
            "type": "void"
          }
        }
      },
      "properties": {
        "Devices": {
          "description": "Contains the list of devices returned by each Protocol specific discovery, where available",
          "access": {
            "0": "r",
            "1": "s"
          },
          "type": "Array",
          "fields": "ProtocolDevice"
        },
        "Protocols": {
          "description": "The list of managed Protocols",
          "access": {
            "0": "r",
            "1": "s"
          },
          "type": "Array",
          "fields": "ProtocolOverview"
        }
      }
    },
    "iot.agile.Network": {
      "methods": {
        "CreateAP": {
          "description": "Create a local access point",
          "args": {
            "subnet": {
              "description": "A valid subnet to use to setup the access point",
              "example": "10.0.0.0/8",
              "type": "String"
            },
            "gateway": {
              "description": "The default gateway to use for routing / natting",
              "example": "192.168.0.1",
              "type": "String"
            },
            "password": {
              "description": "The default access password / key used to login depending on AP setup",
              "type": "String"
            }
          }
        },
        "ScanWiFi": {
          "description": "Search for available WiFi",
          "return": {
            "type": "void"
          }
        }
      },
      "properties": {
        "Status": {
          "description": "Indicates if an internet connection is available",
          "type": "Boolean"
        },
        "Connections": {
          "description": "List available internet connections",
          "access": {
            "0": "r",
            "1": "s"
          },
          "type": "Array",
          "fields": "String"
        },
        "Devices": {
          "description": "List available network system devices",
          "type": "Array",
          "fields": "String"
        }
      }
    },
    "iot.agile.Storage.Driver": {
      "description": "A Driver component is in charge of data storage and\nretrieval on a specific implementation.\nIt may be a local database or an online services via APIs\n",
      "group": "Data storage",
      "methods": {
        "Create": {
          "description": "Creates a record",
          "args": {
            "record": {
              "type": "RecordObject"
            }
          },
          "return": {
            "description": "Return the Id of the created record",
            "type": "String"
          }
        },
        "Read": {
          "description": "Load a record by Id",
          "args": {
            "id": {
              "type": "String"
            }
          },
          "return": {
            "description": "Return the corresponding record",
            "type": "RecordObject"
          }
        },
        "Update": {
          "description": "Updates a record",
          "args": {
            "id": {
              "type": "String"
            },
            "record": {
              "type": "RecordObject"
            }
          },
          "return": {
            "type": "void"
          }
        },
        "Delete": {
          "description": "Delete a record by Id",
          "args": {
            "id": {
              "type": "String"
            }
          },
          "return": {
            "type": "void"
          }
        },
        "Find": {
          "description": "Search for a set of records by criterias",
          "args": {
            "query": {
              "type": "BaseQuery"
            }
          },
          "return": {
            "type": "Array",
            "fields": "RecordObject"
          }
        }
      },
      "properties": {
        "Name": {
          "description": "The driver friendly name",
          "access": {
            "0": "r"
          },
          "type": "String"
        },
        "Enabled": {},
        "Status": {
          "description": "Indicate the overall status of the Driver.",
          "access": {
            "0": "r"
          },
          "type": "DriverStatus"
        },
        "Error": {
          "description": "Indicates if an error occured. May be reset once notified.",
          "access": {
            "0": "r",
            "1": "w",
            "2": "s"
          },
          "type": "Boolean"
        },
        "Params": {
          "description": "Contains Driver specific configurations\n",
          "access": {
            "0": "r",
            "1": "w"
          },
          "type": "Object",
          "fields": {
            "uri": {
              "description": "A parsable connection string composed of key value\nindicated by `=` symbol, separated with `;`.\nIf value contains a separator (`=` or `;`) it must be escaped with a backslash.\nThis may be exposed to the users with a proper UI to allow insertion of personal keys\n",
              "example": "hostname=localhost;password=my \\;password;",
              "type": "String"
            },
            "options": {
              "type": "Object*"
            }
          }
        },
        "Logs": {
          "description": "A system path to read the logs from",
          "type": "String"
        }
      }
    },
    "iot.agile.Storage.DriverManager": {
      "description": "The DriverManager component is in charge for handling the status\nof different Drivers available in the system.\n",
      "group": "Data storage",
      "methods": {
        "Add": {
          "description": "Add a driver reference instance",
          "args": {
            "driver": {
              "description": "The driver instance to be added",
              "example": "iot/agile/Storage/Driver/Influx0",
              "type": "String",
              "reference": "iot.agile.Storage.Driver"
            },
            "enable": {
              "description": "Specify if the Driver should be enabled and\nimmediately available\n",
              "type": "Boolean"
            }
          },
          "return": {
            "type": "void"
          }
        },
        "Remove": {
          "description": "Remove (and implicitly disable) a driver reference\ninstance\n",
          "args": {
            "driver": {
              "description": "The driver instance",
              "example": "iot/agile/Storage/Driver/Sqlite0",
              "type": "String",
              "reference": "iot.agile.Storage.Driver"
            }
          },
          "return": {
            "type": "void"
          }
        },
        "Enable": {
          "description": "Enable a driver reference instance",
          "args": {
            "driver": {
              "description": "The driver instance",
              "example": "iot/agile/Storage/Driver/Sqlite0",
              "type": "String",
              "reference": "iot.agile.Storage.Driver"
            }
          },
          "return": {
            "type": "void"
          }
        },
        "Disable": {
          "description": "Disable a driver reference instance",
          "args": {
            "driver": {
              "description": "The driver instance",
              "example": "iot/agile/Storage/Driver/Sqlite0",
              "type": "String",
              "reference": "iot.agile.Storage.Driver"
            }
          },
          "return": {
            "type": "void"
          }
        },
        "Status": {
          "description": "Query a Driver to report the current status.",
          "args": {
            "driver": {
              "description": "The driver instance",
              "example": "iot/agile/Storage/Driver/Sqlite0",
              "type": "String",
              "reference": "iot.agile.Storage.Driver"
            }
          },
          "return": {
            "type": "Object",
            "fields": {
              "enabled": {
                "type": "Boolean"
              },
              "status": {
                "type": "DriverStatus"
              },
              "logs": {
                "description": "A system path where to read the Driver logs",
                "example": "/var/log/agile-driver/storage.log",
                "type": "String"
              }
            }
          }
        }
      },
      "properties": {
        "Enabled": {
          "description": "List of enabled Drivers.",
          "type": "Array",
          "reference": "iot.agile.Storage.Driver"
        },
        "List": {
          "description": "List of all available Drivers.",
          "type": "Array",
          "reference": "iot.agile.Storage.Driver"
        }
      }
    },
    "iot.agile.Storage": {
      "description": "The Storage component offer an abstraction for Devices to store and fetch data\nin a generic way.\nWrite operations happens on all the enabled Drivers;\nFailure of a single Driver doesn't make faile the whole write but only reported\nRead operations work on a default driver, if specified, which acts as preferred source.\nIn case default is not available or fails, read will be executed in cascade on\nthe enabled Driver. If none replies the operation fails.\n",
      "group": "Data storage",
      "methods": {
        "Create": {
          "description": "Creates a record",
          "args": {
            "record": {
              "type": "RecordObject"
            }
          },
          "return": {
            "description": "Return the Id of the created record",
            "type": "String"
          }
        },
        "Read": {
          "description": "Load a record by Id",
          "args": {
            "Id": {
              "type": "String"
            }
          },
          "return": {
            "description": "Return the corresponding record",
            "type": "RecordObject"
          }
        },
        "Update": {
          "description": "Updates a record",
          "args": {
            "Id": {
              "type": "String"
            },
            "Record": {
              "type": "RecordObject"
            }
          },
          "return": {
            "type": "void"
          }
        },
        "Delete": {
          "description": "Delete a record by Id",
          "args": {
            "Id": {
              "type": "String"
            }
          },
          "return": {
            "type": "void"
          }
        },
        "Find": {
          "description": "Search for a set of records by criterias",
          "args": {
            "query": {
              "type": "BaseQuery"
            }
          },
          "return": {
            "type": "Array",
            "fields": "RecordObject"
          }
        }
      },
      "properties": {
        "Connections": {
          "type": "Array",
          "reference": "iot.agile.Storage.Driver"
        }
      }
    }
  },
  "types": {
    "StatusType": {
      "type": "Enum",
      "fields": {
        "0": {
          "type": "CONNECTED"
        },
        "1": {
          "type": "DISCONNECTED"
        }
      }
    },
    "ChannelTypeEnum": {
      "type": "Enum",
      "fields": {
        "0": {
          "type": "Number"
        },
        "1": {
          "type": "String"
        },
        "2": {
          "type": "Boolean"
        },
        "3": {
          "type": "GeoPoint"
        },
        "4": {
          "type": "Object"
        }
      }
    },
    "DeviceStreamChannel": {
      "description": "A channel contains a single measurement value of a sensor",
      "type": "Object",
      "fields": {
        "name": {
          "type": "String"
        },
        "type": {
          "type": "ChannelTypeEnum"
        }
      }
    },
    "DeviceStream": {
      "description": "A stream contains a set of measurement values for a sensor",
      "type": "Object",
      "fields": {
        "name": {
          "type": "String"
        },
        "channels": {
          "type": "Array",
          "fields": "DeviceStreamChannel"
        }
      }
    },
    "DeviceDefinition": {
      "description": "A device definition that contains informations describing the current device",
      "type": "Object",
      "fields": {
        "id": {
          "type": "String"
        },
        "name": {
          "type": "String"
        },
        "description": {
          "type": "String"
        },
        "properties": {
          "type": "Object*"
        },
        "streams": {
          "type": "Array",
          "fields": "DeviceStream"
        }
      }
    },
    "ProtocolDevice": {
      "description": "List all devices a Protocol knows about.\nThe list is updated by the Discover method.\nDevices may be provisioned programmatically during the initialization phase.\n",
      "access": {
        "0": "r",
        "1": "s"
      },
      "type": "Array",
      "fields": {
        "__field": {
          "type": "Object",
          "fields": {
            "name": {
              "type": "String"
            },
            "id": {
              "type": "String"
            },
            "status": {
              "type": "Enum",
              "fields": {
                "0": {
                  "type": "CONNECTED"
                },
                "1": {
                  "type": "DISCONNECTED"
                }
              }
            }
          }
        }
      }
    },
    "ProtocolStatus": {
      "description": "Identify a status of the Protocol, indicating if operational (AVAILABLE) or\nif for some reason further user-side checks are required.\n",
      "type": "Enum",
      "fields": {
        "0": {
          "type": "AVAILABLE"
        },
        "1": {
          "type": "NOT_CONFIGURED"
        },
        "2": {
          "type": "UNAVAILABLE"
        },
        "3": {
          "type": "DISABLED"
        },
        "4": {
          "type": "FATAL"
        }
      }
    },
    "ProtocolProfile": {
      "description": "A Protocol set of settings that translate human readable properties\nto actual Protocol implementation details.\n\nFor example, the user request the temperature value over a BLE connected\ndevice and the Protocol receive all the specific informations (like\nservices and characteristics ids) to enable the data reading.\n",
      "type": "Object*"
    },
    "ProtocolOverview": {
      "type": "Object",
      "fields": {
        "name": {
          "type": "String"
        },
        "id": {
          "type": "String"
        },
        "status": {
          "type": "ProtocolStatus"
        }
      }
    },
    "DriverStatus": {
      "type": "Enum",
      "fields": {
        "0": {
          "type": "ACTIVE"
        },
        "1": {
          "type": "NOT_CONFIGURED"
        },
        "2": {
          "type": "ERROR"
        },
        "3": {
          "type": "FAILURE"
        }
      }
    },
    "RecordObject": {
      "type": "Object",
      "fields": {
        "DeviceId": {
          "type": "String"
        },
        "StreamId": {
          "type": "String"
        },
        "ChannelId": {
          "type": "String"
        },
        "LastUpdate": {
          "description": "A UNIX timestamp rapresenting the last update of a record",
          "type": "Number"
        },
        "Channels": {
          "description": "A list of key/value matching those indicated in the DeviceDefinition",
          "type": "KeyValue"
        }
      }
    },
    "KeyValue": {
      "description": "A list of key/value pairs",
      "type": "Object*"
    },
    "BaseQuery": {
      "type": "Object",
      "fields": {
        "Criteria": {
          "description": "A key-value series of field-value to query for.\n- Use `*` to indicate a fuzzy search\n- Use an Array to indicate an IN like query\n",
          "type": "Object*"
        },
        "OrderBy": {
          "description": "A key-value series of field-value to order the result for.\n",
          "type": "Object*"
        },
        "Limit": {
          "description": "The limit of records founds to return",
          "type": "Number"
        },
        "Offset": {
          "description": "The position for the first record to take from the list of results",
          "type": "Number"
        }
      }
    }
  }
}